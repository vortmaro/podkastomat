#!/usr/bin/python3

import lib.args as args
import lib.config as cfg
import lib.files as files
import lib.rss as rss
import os
import subprocess

print("Starting process...", flush=True)

os.chdir(os.path.dirname(__file__))
config = cfg.load()
options = args.read()

for podcast in config['podcasts']:
    if options.filter and not options.filter in podcast['name'].lower():
        continue
    elif not options.filter and podcast['auto'] == False:
        continue
    files.addRef(podcast)
    rss.fetch(podcast, options.loadFeed)
    if options.downloadEpisodes:
        eps = rss.getEpisodes(podcast, options.episodes, options.numEpisodes)
        for ep in eps:
            files.saveEpisode(podcast, ep, options)

if not options.generate:
    exit(0)
audioFiles = files.findAudio()
print("Audio files found: ", len(audioFiles), flush=True)

transcriptsGenerated = []
for audioFile in audioFiles:
    audioLength = files.getAudioLength(audioFile)
    language = files.getLangCode(audioFile)
    skipped = True

    # Generate transcript
    if not files.hasTranscript(audioFile):
        skipped = False
        print(f"Transcribing audio: {audioFile} ({audioLength})", flush=True)
        files.generateFromAudio(audioFile, 'transcribe', options)
        print(f"Finished transcribing {audioFile}", flush=True)
        transcriptsGenerated.append(audioFile)

    # Generate translation
    if (language in config['translate'] and not files.hasTranslation(audioFile)
        and language != 'eo' and options.tts != 'vosk'
    ):
        skipped = False
        print(f"Translating audio: {audioFile} ({audioLength})", flush=True)
        files.generateFromAudio(audioFile, 'translate', options)
        print(f"Finished translating {audioFile}", flush=True)

    # Generate HTML variant of transcript
    if files.hasTranscript(audioFile) and not files.hasHtml(audioFile):
        files.generateHtml(audioFile, options)

    if skipped and options.verbose:
        print(f"Skipped audio: {audioFile} ({audioLength})")

if len(transcriptsGenerated) > 0:
    outputText = "Transcripts have been generated for:\n"
    outputText += "\n".join(transcriptsGenerated)
    try:
        subprocess.run(['zenity', '--info', '--text', outputText])
    except:
        # Zenity likely isn't installed (e.g. if not running X11)
        pass
